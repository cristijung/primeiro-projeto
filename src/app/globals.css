/* Quanto ao acesso de variáveis de Sass: 
Cria-se as variáveis com '--', que é um padrão do CSS e colocar no global.css.
Nos .module.scss, se pode acessar as var CSS globais usando a função 'var()' do CSS. -->
.textoGrande {
  font-size: var(--tamanho-fonte-grande);
} 
As vars=iáveis 'CSS Custom Properties' são nativas do navegador --> Os navegadores entendem como interpretá-las.
O Sass (scss) não precisa 'conhecer' as vars antes: qdo se usa var(--nome-da-variavel) no scss, o Sass não vai tentar processar ou compilar essa variável em si. ele a mantém como está no CSS final gerado. 
depois, o navegador, no momento da renderização, substitui var(--nome-da-variavel) pelo valor definido no :root ou em outro seletor declarado
Com a modularidade mantida, se continua usando scss modular para estilos específicos de componentes, evitando conflitos de nomes, 
mas aproveita a centralização das definições de design tokens (cores, fontes, etc.) no seu CSS global.
*/

:root {
  --background: #ffffff;
  --foreground: #171717;
  --primary-color: #f5eb62;
  --secondary-color: #c0b40c;
  --text-color: #fdf4f4;
  --text-color-hover: $primary-color;
  --text-color-active: $secondary-color;
  --navbar-background: #510568; 
  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  --font-size: 1.5rem;
  --font-weight: 500;
  --transition-speed: 0.2s;
  --transition-timing-function: ease-in-out;
  --icon-spacing: 0.5em;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
  min-height: 100vh;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}
